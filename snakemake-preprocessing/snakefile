import glob, os
import pandas as pd

# Specify config file
configfile: "config.yaml"

# Specify samples
bc = pd.read_csv(config['bc'], sep = ",", header = None)
sample = config['samplename']

# Rule specifying output files
rule all:
    input:
        expand(config['output'] + "bamfiles/{bc}.dedup_q30.bam",
            bc = bc.iloc[:,0]),
        expand(config['output'] + "bamfiles/{bc}.dedup_q30.bam.bai",
            bc = bc.iloc[:,0]),
        config['output'] + config['samplename'] + "_log.txt",
        config['output'] + config['samplename'] + "_all.tsv",
        config['output'] + config['samplename'] + "_dedup.tsv"


if config['lanesplit']:
    lanes = ["L001", "L002", "L003", "L004"]

    # Rule for extracting barcodes from read and appending them to head
    if config['paired']:
        rule demux:
            input:
                fastq1=config['input'] + config['samplename'] + "_{lane}_R1.fastq.gz",
                fastq2=config['input'] + config['samplename'] + "_{lane}_R2.fastq.gz",
                barcodes=config['bc'],
            output:
                fastq1=temp(expand(config['output'] + "demultiplexed_{{lane}}/{bc}_R1.fastq",
                    bc = bc.iloc[:,0])),
                fastq2=temp(expand(config['output'] + "demultiplexed_{{lane}}/{bc}_R2.fastq",
                    bc = bc.iloc[:,0])),
                unassigned1=temp(config['output'] + "demultiplexed_{lane}/unassigned_R1.fastq"),
                unassigned2=temp(config['output'] + "demultiplexed_{lane}/unassigned_R2.fastq"),
                logfile=temp(config['output'] + config['samplename'] + "_{lane}_log.txt")
            params:
                outdir=config['output'] + "demultiplexed_{lane}/",
                mismatches=config['mismatches'],
                barcode_length=config['barcode_length']
            shell:
                config['demux'] + " -f {input.fastq1} -f2 {input.fastq2} --paired "
                "-o {params.outdir} -l {output.logfile} -b {input.barcodes} "
                "-m {params.mismatches} --barcode_length {params.barcode_length}"

        rule concatenateFastq:
            input:
                f1=expand(config['output'] + "demultiplexed_{lane}/{{bc}}_R1.fastq",
                          lane=lanes),
                f2=expand(config['output'] + "demultiplexed_{lane}/{{bc}}_R2.fastq",
                          lane=lanes)
            output:
                f1=config['output'] + "demultiplexed/{bc}_R1.fastq.gz",
                f2=config['output'] + "demultiplexed/{bc}_R2.fastq.gz"
            threads: config['threads']
            shell:
                """
                cat {input.f1} | pigz -c -p {threads} > {output.f1};
                cat {input.f2} | pigz -c -p {threads} > {output.f2}
                """

        rule concatenateUnassigned:
            input:
                f1=expand(config['output'] + "demultiplexed_{lane}/unassigned_R1.fastq",
                       lane=lanes),
                f2=expand(config['output'] + "demultiplexed_{lane}/unassigned_R2.fastq",
                       lane=lanes)
            output:
                f1=config['output'] + "demultiplexed/unassigned_R1.fastq.gz",
                f2=config['output'] + "demultiplexed/unassigned_R2.fastq.gz"
            threads: config['threads']
            shell:
                """
                cat {input.f1} | pigz -c -p {threads} > {output.f1};
                cat {input.f2} | pigz -c -p {threads} > {output.f2}
                """

        # Aligning
        rule bwa:
            input:
                ref=config['ref'],
                fastq1=config['output'] + "demultiplexed/{bc}_R1.fastq.gz",
                fastq2=config['output'] + "demultiplexed/{bc}_R2.fastq.gz"
            output:
                bam=temp(config['output'] + "bamfiles/{bc}.bam"),
                bai=temp(config['output'] + "bamfiles/{bc}.bam.bai")
            params:
                rg=r"@RG\tID:{bc}\tSM:{bc}\tPL:ILLUMINA"
            threads: config['threads']
            shell:
                "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
                "samtools sort -o {output.bam} && "
                "samtools index -@ {threads} {output.bam}"
    else:
        rule demux:
            input:
                fastq=config['input'] + config['samplename'] + "_{lane}_R1.fastq.gz",
                barcodes=config['bc'],
            output:
                fastq=temp(expand(config['output'] + "demultiplexed_{{lane}}/{bc}.fastq",
                    bc = bc.iloc[:,0])),
                unassigned=temp(config['output'] + "demultiplexed_{lane}/unassigned.fastq"),
                logfile=temp(config['output'] + config['samplename'] + "_{lane}_log.txt")
            params:
                outdir=config['output'] + "demultiplexed_{lane}/",
                mismatches=config['mismatches'],
                barcode_length=config['barcode_length']
            shell:
                config['demux'] + " -f {input.fastq} -o {params.outdir} "
                "-l {output.logfile} -b {input.barcodes} -m {params.mismatches} "
                "--barcode_length {params.barcode_length}"

        rule concatenateFastq:
            input:
                expand(config['output'] + "demultiplexed_{lane}/{{bc}}.fastq",
                       lane=lanes)
            output:
                config['output'] + "demultiplexed/{bc}.fastq.gz"
            threads: config['threads']
            shell:
                "cat {input} | pigz -c -p {threads} > {output}"


        rule concatenateUnassigned:
            input:
                expand(config['output'] + "demultiplexed_{lane}/unassigned.fastq",
                    lane=lanes)
            output:
                config['output'] + "demultiplexed/unassigned.fastq.gz"
            threads: config['threads']
            shell:
                "cat {input} | pigz -c -p {threads} > {output}"

        # Aligning
        rule bwa:
            input:
                ref=config['ref'],
                fastq=config['output'] + "demultiplexed/{bc}.fastq.gz"
            output:
                bam=temp(config['output'] + "bamfiles/{bc}.bam"),
                bai=temp(config['output'] + "bamfiles/{bc}.bam.bai")
            params:
                rg=r"@RG\tID:{bc}\tSM:{bc}\tPL:ILLUMINA"
            threads: config['threads']
            shell:
                "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
                "samtools sort -o {output.bam} && "
                "samtools index -@ {threads} {output.bam}"

    rule concatenateLogs:
        input:
            expand(config['output'] + config['samplename'] + "_{lane}_log.txt",
                lane=lanes)
        output:
            config['output'] + config['samplename'] + "_log.txt"
        shell:
            config['combineLogs'] + " -f {input} -o {output}"

else:
    # Rule for extracting barcodes from read and appending them to head
    if config['paired']:
        rule demux:
            input:
                fastq1=config['input'] + config['samplename'] + "_R1.fastq.gz",
                fastq2=config['input'] + config['samplename'] + "_R2.fastq.gz",
                barcodes=config['bc'],
            output:
                fastq1=temp(expand(config['output'] + "demultiplexed/{bc}_R1.fastq",
                    bc = bc.iloc[:,0])),
                fastq2=temp(expand(config['output'] + "demultiplexed/{bc}_R2.fastq",
                    bc = bc.iloc[:,0])),
                unassigned1=temp(config['output'] + "demultiplexed/unassigned_R1.fastq"),
                unassigned2=temp(config['output'] + "demultiplexed/unassigned_R2.fastq"),
                logfile=config['output'] + config['samplename'] + "_log.txt"
            params:
                outdir=config['output'] + "demultiplexed/",
                mismatches=config['mismatches'],
                barcode_length=config['barcode_length']
            shell:
                config['demux'] + " --fastq {input.fastq1} --fastq2 {input.fastq2} "
                "--paired -o {params.outdir} -l {output.logfile} -b {input.barcodes} "
                "-m {params.mismatches} --barcode_length {params.barcode_length}"

        # Gzip output of demux
        rule pigz:
            input:
                expand(config['output'] + "demultiplexed/{bc}_R1.fastq",
                    bc = bc.iloc[:,0]),
                expand(config['output'] + "demultiplexed/{bc}_R2.fastq",
                    bc = bc.iloc[:,0]),
                config['output'] + "demultiplexed/unassigned_R1.fastq",
                config['output'] + "demultiplexed/unassigned_R2.fastq"
            output:
                expand(config['output'] + "demultiplexed/{bc}_R1.fastq.gz",
                    bc = bc.iloc[:,0]),
                expand(config['output'] + "demultiplexed/{bc}_R2.fastq.gz",
                    bc = bc.iloc[:,0]),
                config['output'] + "demultiplexed/unassigned_R1.fastq.gz",
                config['output'] + "demultiplexed/unassigned_R2.fastq.gz"
            threads: config['threads']
            shell:
                "pigz -p {threads} {input}"

        # Aligning
        rule bwa:
            input:
                ref=config['ref'],
                fastq1=config['output'] + "demultiplexed/{bc}_R1.fastq.gz",
                fastq2=config['output'] + "demultiplexed/{bc}_R2.fastq.gz"
            output:
                bam=temp(config['output'] + "bamfiles/{bc}.bam"),
                bai=temp(config['output'] + "bamfiles/{bc}.bam.bai")
            params:
                rg=r"@RG\tID:{bc}\tSM:{bc}\tPL:ILLUMINA"
            threads: config['threads']
            shell:
                "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
                "samtools sort -o {output.bam} && "
                "samtools index -@ {threads} {output.bam}"

    else:
        rule demux:
            input:
                fastq=config['input'] + config['samplename'] + "_R1.fastq.gz",
                barcodes=config['bc'],
            output:
                fastq=temp(expand(config['output'] + "demultiplexed/{bc}.fastq",
                    bc = bc.iloc[:,0])),
                unassigned=temp(config['output'] + "demultiplexed_/unassigned.fastq"),
                logfile=config['output'] + config['samplename'] + "_log.txt"
            params:
                outdir=config['output'] + "demultiplexed/",
                mismatches=config['mismatches'],
                barcode_length=config['barcode_length']
            shell:
                config['demux'] + " -f {input.fastq} -o {params.outdir} "
                "-l {output.logfile} -b {input.barcodes} -m {params.mismatches} "
                "--barcode_length {params.barcode_length}"

        # Gzip output of demux
        rule pigz:
            input:
                expand(config['output'] + "demultiplexed/{bc}.fastq",
                    bc = bc.iloc[:,0]),
                config['output'] + "demultiplexed/unassigned.fastq"
            output:
                expand(config['output'] + "demultiplexed/{bc}.fastq.gz",
                    bc = bc.iloc[:,0])
            threads: config['threads']
            shell:
                "pigz -p {threads} {input}"

        # Aligning
        rule bwa:
            input:
                ref=config['ref'],
                fastq=config['output'] + "demultiplexed/{bc}.fastq.gz"
            output:
                bam=temp(config['output'] + "bamfiles/{bc}.bam"),
                bai=temp(config['output'] + "bamfiles/{bc}.bam.bai")
            params:
                rg=r"@RG\tID:{bc}\tSM:{bc}\tPL:ILLUMINA"
            threads: config['threads']
            shell:
                "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
                "samtools sort -o {output.bam} && "
                "samtools index -@ {threads} {output.bam}"




# Filter reads based on readname using gatk
if config['paired']:
    # Get readnames of reads that mapped within cutsite range
    # and map to chr 1:22, X or Y
    rule getReads:
        input:
            bam=config['output'] + "bamfiles/{bc}.bam",
            cutsites=config['cutsites']
        output:
            temp(config['output'] + "bamfiles/{bc}_readnames.txt")
        params:
            readlength = config["read_length"]
        shell:
            config['getReads'] + " -b {input.bam} -c {input.cutsites} "
            "-o {output} --readlength {params} --paired"

    rule filterReads:
        input:
            bam=config['output'] + "bamfiles/{bc}.bam",
            bai=config['output'] + "bamfiles/{bc}.bam.bai",
            readnames=config['output'] + "bamfiles/{bc}_readnames.txt"
        output:
            bam=temp(config['output'] + "bamfiles/{bc}_filtered.bam"),
            bai=temp(config['output'] + "bamfiles/{bc}_filtered.bai"),
            log=config['output'] + "logs/{bc}-cutsite-filter.log"
        shell:
            """
            gatk FilterSamReads -I {input.bam} -O {output.bam} \\
            -RLF {input.readnames} --FILTER includeReadList --CREATE_INDEX true &&

            echo "pre cutsite-distance filter reads: " \\
            $(samtools view -c -f 64 -F 260 {input.bam}) > {output.log}

            echo "post cutsite-distance filter reads: " \\
            $(samtools view -c -f 64 -F 260 {output.bam}) >> {output.log}
            """
else:
    # Get readnames of reads that mapped within cutsite range
    # and map to chr 1:22, X or Y
    rule getReads:
        input:
            bam=config['output'] + "bamfiles/{bc}.bam",
            cutsites=config['cutsites']
        output:
            temp(config['output'] + "bamfiles/{bc}_readnames.txt")
        params:
            readlength = config["read_length"]
        shell:
            config['getReads'] + " -b {input.bam} -c {input.cutsites} -o {output} --readlength {params}"

    rule filterReads:
        input:
            bam=config['output'] + "bamfiles/{bc}.bam",
            bai=config['output'] + "bamfiles/{bc}.bam.bai",
            readnames=config['output'] + "bamfiles/{bc}_readnames.txt"
        output:
            bam=temp(config['output'] + "bamfiles/{bc}_filtered.bam"),
            bai=temp(config['output'] + "bamfiles/{bc}_filtered.bai"),
            log=config['output'] + "logs/{bc}-cutsite-filter.log"
        shell:
            """
            gatk FilterSamReads -I {input.bam} -O {output.bam} \\
            -RLF {input.readnames} --FILTER includeReadList --CREATE_INDEX true &&

            echo "pre cutsite-distance filter reads: " \\
            $(samtools view -c -F 260 {input.bam}) > {output.log}

            echo "post cutsite-distance filter reads: " \\
            $(samtools view -c -F 260 {output.bam}) >> {output.log}
            """

# QC pre-dedup
rule aflred_pre:
    input:
        bam=config['output'] + "bamfiles/{bc}_filtered.bam",
        ref=config['ref']
    output:
        temp(config['output'] + "bamfiles/{bc}.all.tsv.gz")
    shell:
        config['alfred'] + " qc -r {input.ref} -o {output} "
        "{input.bam}"

# Dedup
if config['paired']:
    rule deduplication:
        input:
            bam=config['output'] + "bamfiles/{bc}_filtered.bam",
            index=config['output'] + "bamfiles/{bc}_filtered.bai"
        output:
            bam=protected(config['output'] + "bamfiles/{bc}.dedup_q30.bam"),
            bai=config['output'] + "bamfiles/{bc}.dedup_q30.bam.bai",
            log=config['output'] + "logs/{bc}.log"
        threads: 4
        shell:
            "umi_tools dedup -I {input.bam} -S {output.bam} -L {output.log} "
            "--mapping-quality 30 --paired && samtools index -@ {threads} {output.bam}"
else:
    rule deduplication:
        input:
            bam=config['output'] + "bamfiles/{bc}_filtered.bam",
            index=config['output'] + "bamfiles/{bc}_filtered.bai"
        output:
            bam=protected(config['output'] + "bamfiles/{bc}.dedup_q30.bam"),
            bai=config['output'] + "bamfiles/{bc}.dedup_q30.bam.bai",
            log=config['output'] + "logs/{bc}.log"
        threads: 4
        shell:
            "umi_tools dedup -I {input.bam} -S {output.bam} -L {output.log} "
            "--mapping-quality 30 && samtools index -@ {threads} {output.bam}"


# QC post-dedup
rule aflred_post:
    input:
        bam=config['output'] + "bamfiles/{bc}.dedup_q30.bam",
        ref=config['ref']
    output:
        temp(config['output'] + "bamfiles/{bc}.dedup.tsv.gz")
    shell:
        config['alfred'] + " qc -r {input.ref} -o {output} "
        "{input.bam}"

# QC summary
rule qc:
    input:
        expand(config['output'] + "bamfiles/{bc}.all.tsv.gz",
            bc = bc.iloc[:,0]),
        expand(config['output'] + "bamfiles/{bc}.dedup.tsv.gz",
            bc = bc.iloc[:,0])
    output:
        protected(config['output'] + config['samplename'] + "_all.tsv"),
        protected(config['output'] + config['samplename'] + "_dedup.tsv")
    params:
        directory=config['output'],
        out=config['output'] + config['samplename'] + "_"
    shell:
        """
        zgrep ^ME {params.directory}bamfiles/*all.tsv.gz | cut -f 2- | \\
        sed -n '1p;0~2p' > {params.out}all.tsv
        zgrep ^ME {params.directory}bamfiles/*dedup.tsv.gz | cut -f 2- | \\
        sed -n '1p;0~2p' > {params.out}dedup.tsv
        """